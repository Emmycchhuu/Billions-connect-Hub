if (typeof Sentry !== 'undefined') {var originalSentry = Sentry;Sentry = {};Object.keys(originalSentry).forEach(key => {Object.defineProperty(Sentry, key, {get: function () {if (typeof originalSentry[key] === 'function') {return function () {};} else {return undefined;}}});});window.addEventListener('unhandledrejection', event => {console.warn(`UNHANDLED PROMISE REJECTION: ${event.reason}`);originalSentry.captureMessage(event.reason);});originalSentry.init({dsn: 'https://187d3faab5dc47dcfae080ac34081c02@o529943.ingest.us.sentry.io/4509722511147008',release: '9c2033cb5d3232d7b398f6542e6533f5f45d45a3',attachStacktrace: true,environment: 'prod',integrations: [],denyUrls: [],ignoreErrors: [/Network request failed.*/,/pageName is require.*/,/Loading chunk \d+ failed.*/,/Loading CSS chunk \d+ failed.*/,/Your operation is too frequent, please try again later.*/,/Non-Error promise rejection captured with keys: code, message, standard/,/Cannot read properties of undefined \(reading 'firefoxSample'\)/],beforeSend: (event, hint) => {var sampleRate = 0.01;/* if error level is fatal, we don't want to sample it */if(event && event.level && event.level === 'fatal') {sampleRate = 1;if (event.exception && event.exception.values && event.exception.values[0] && event.exception.values[0].mechanism) {event.exception.values[0].mechanism.handled = false;}}try {var fileName = event.exception.values[0].stacktrace.frames.slice(-1)[0].filename;var message = hint.originalException.message;if (message.includes('The object does not support the operation or argument') && fileName.includes('sensor')) {return null;}} catch (e) {}if(hint && hint.originalException) {var error = hint.originalException;if(error && error.message === 'ResizeObserver loop limit exceeded'){return null;}/* add more info for some errors to make it more useful */if(error && error.message && error.message.includes('The quota has been exceeded')){try {var _lsTotal = 0, _xLen, _x;for (_x in localStorage) {if (!localStorage.hasOwnProperty(_x)) {continue;}_xLen = ((localStorage[_x].length + _x.length) * 2);_lsTotal += _xLen;if((_xLen / 1024).toFixed(2) >1) {event.extra[_x.substr(0, 50)] = (_xLen / 1024).toFixed(2);}}event.extra['localStorageTotal'] = (_lsTotal / 1024).toFixed(2);event.tags['localStorage'] = '1';} catch (e) {event.tags['localStorage'] = '0';}}/* add more info for some errors to make it more useful */if(error && error.message === 'Cannot redefine property: src') {try {event.extra['plugins'] = Array.from(navigator.plugins || []).map(item => item.name).join();event.extra['OtAutoBlockTimes'] = Array.from(document.querySelectorAll('script')).filter(script => script.src.includes('OtAutoBlock.js')).length;event.tags['plugins'] = '1';} catch (e) {event.tags['plugins'] = '0';}}}var random = Math.random();if(random <= sampleRate){return event;} else {return null;}}});originalSentry.configureScope(scope => {scope.setExtra('isServer', false);scope.setTag('isServer', false);});}